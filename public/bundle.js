/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports) {

	eval("'use strict';\n\ndocument.addEventListener(\"DOMContentLoaded\", function (event) {\n\n  //variable store//\n  var vendorUrl = window.URL || window.webkitURL,\n      peer = void 0,\n      chattersClient = [],\n      chatterThisClient = void 0,\n      roomID = void 0,\n\n  //variables for video, peerCanvas, and context logic\n  peerVideo = void 0,\n      peerCanvas = void 0,\n      peerContext = void 0,\n      myCanvas = void 0,\n      myVideo = void 0,\n      //video canvas\n  myVidCtx = void 0,\n      myContext = void 0,\n      peerVidCtx = void 0,\n      peerVirtualVid = void 0,\n\n  //variables for filter logic\n  current = document.getElementById('filterDisp'),\n      button = document.getElementById('filter'),\n      filters = ['blur(5px)', 'brightness(0.4)', 'contrast(200%)', 'grayscale(100%)', 'hue-rotate(90deg)', 'invert(100%)', 'sepia(100%)', 'saturate(20)', ''],\n      i = 0,\n\n  //clear canvas\n  clearButton = document.getElementById('clear'),\n\n  //animation variables\n  staticButton = document.getElementById('static'),\n      bounceButton = document.getElementById('bounce'),\n      orbitButton = document.getElementById('orbit'),\n      currentAnimation = bounce,\n      temp = void 0,\n\n  //room buttons\n  joinButton = document.getElementById('join-button'),\n      randomButton = document.getElementById('random-button'),\n\n  //raf stands for requestAnimationFrame, enables drawing to occur\n  raf = void 0;\n\n  //image assignment, we can abstract this later\n  // let emoImg = new Image();\n  var currentImg = 'assets/smLoveTongue.png';\n\n  var socket = io();\n  //end variable store//\n\n  //vendor media objects//\n  navigator.getMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;\n  //end vendor media objects//\n\n  //room selection\n  joinButton.addEventListener('click', function () {\n    roomID = document.getElementById('room-id-input').value;\n    socket.emit('joinRoom', JSON.stringify(roomID));\n    // socket.on('tryAgain', (payload) => alert('Try a different room!'))\n\n    socket.on('process', function (payload) {\n      console.log('in process', payload);\n      payload = JSON.parse(payload);\n      console.log(payload);\n      if (!payload) {\n        alert('Try a different room!');\n      } else {\n\n        document.getElementById('roomApp').classList.add('hidden');\n        document.getElementById('mainApp').classList.remove('hidden');\n        // }\n        // })\n        //begin streaming!//\n        navigator.getMedia({\n          video: true,\n          audio: false\n        }, function (stream) {\n\n          //make initiate event happen automatically when streaming begins\n          (function () {\n            socket.emit('initiate', JSON.stringify({\n              streamId: stream.id,\n              roomId: roomID\n            }));\n          })();\n\n          socket.on('readyConnect', function (payload) {\n            document.getElementById('connect').disabled = false;\n          });\n\n          socket.on('initiated', function (member) {\n            member = JSON.parse(member);\n\n            // document.getElementById('roomApp').classList.add('hidden');\n            // document.getElementById('mainApp').classList.remove('hidden');\n\n            //uses the stream from the local webcam and draws it on canvas//\n            var myVirtualVid = document.createElement('video');\n            myVirtualVid.src = window.URL.createObjectURL(stream);\n            myVirtualVid.play();\n\n            //draw local vid on canvas//\n            myVideo = document.getElementById('myVideo');\n            myVidCtx = myVideo.getContext('2d');\n\n            myVirtualVid.addEventListener('play', function () {\n              drawVideo(this, myVidCtx, myVideo.width, myVideo.height);\n            }, false);\n            //end//\n\n            //draw local overlay canvas//\n            myCanvas = document.getElementById('myCanvas');\n            myContext = myCanvas.getContext('2d');\n\n            //width and height should eventually be translated to exact coordination\n            //with incoming video stream\n            myCanvas.width = 500; //640;\n            myCanvas.height = 385; //480;\n\n            //draws blank canvas on top of video\n            myContext.rect(0, 0, myCanvas.width, myCanvas.height);\n            myContext.stroke();\n            //end//\n\n            //set room ID shared between clients\n            roomID = member.roomId;\n\n            if (chattersClient.filter(function (clientChatter) {\n              return clientChatter.id !== member.id;\n            }).length || !chattersClient.length) {\n              chattersClient.push(member);\n              chatterThisClient = member.id;\n            }\n\n            //instantiate peer object\n            peer = new SimplePeer({\n              initiator: member.initiator,\n              trickle: false,\n              stream: stream\n            });\n\n            peer.on('signal', function (data) {\n              document.getElementById('yourId').value = \"Connected!\";\n              var signalObj = JSON.stringify({\n                roomId: roomID,\n                signal: data\n              });\n\n              if (peer.initiator) {\n                socket.emit('initial', signalObj);\n              } else if (!peer.initiator) {\n                socket.emit('third', signalObj);\n              }\n            });\n\n            document.getElementById('connect').addEventListener('click', function () {\n              // if (!peer.initiator) {\n              socket.emit('second', JSON.stringify(roomID));\n              // }\n            });\n\n            socket.on('initialConnected', function () {\n              if (!peer.initiator) {\n                console.log('Initial connected good');\n              }\n            });\n\n            socket.on('secondPart2', function (initialClientSig) {\n              initialClientSig = JSON.parse(initialClientSig);\n              if (!peer.initiator) {\n                peer.signal(initialClientSig);\n              }\n            });\n\n            socket.on('thirdPart2', function (secondClientSig) {\n              secondClientSig = JSON.parse(secondClientSig);\n              if (peer.initiator) {\n                peer.signal(secondClientSig);\n              }\n            });\n\n            socket.on('updateChatters', function (chatter) {\n              chattersClient.splice(chattersClient.indexOf(chatter), 1);\n            });\n\n            peer.on('data', function (data) {\n\n              //parse data string to get the data object\n              var dataObj = JSON.parse(data);\n              //check data object for keys indicating if the type of data is a message\n              if (dataObj.message) {\n                //post message in the text content chat box spot\n                document.getElementById('messages').textContent += dataObj.message + '\\n';\n                //check data object for key indicating clicked the 'filter me!' button\n              } else if (dataObj.myFilter) {\n                //checks the value of the key to see if a filter needs to be added\n                if (dataObj.myFilter === 'yes') {\n                  //applies filter to video to reflect partner's video\n                  setVendorCss(peerVideo, dataObj.filterType);\n                  //checks value of key to see if filter needs to be removed\n                } else if (dataObj.myFilter === 'no') {\n                  //removes filter\n                  peerVideo.removeAttribute('style');\n                }\n\n                //check data object for key indicating user clicked the \"filter them\" button\n              } else if (dataObj.peerFilter) {\n                //checks key value to see if a filter needs to be added\n                if (dataObj.peerFilter === 'yes') {\n                  //applies filter\n                  setVendorCss(myVideo, dataObj.filterType);\n                  //checks key value to see if a filter needs to be removed\n                } else if (dataObj.peerFilter === 'no') {\n                  //removes filter\n                  myVideo.removeAttribute('style');\n                }\n              } else if (dataObj.emoji) {\n\n                //remote display bounce animation!\n                var emoImg = new Image();\n                emoImg.src = dataObj.currentImg;\n\n                temp = currentAnimation;\n                currentAnimation = eval('(' + dataObj.animation + ')');\n                currentAnimation(peerCanvas, peerContext, event, dataObj.position, emoImg);\n                currentAnimation = temp;\n              } else if (dataObj.peerEmoji) {\n\n                //local display bounce animation!\n                var _emoImg = new Image();\n                _emoImg.src = dataObj.currentImg;\n\n                temp = currentAnimation;\n                currentAnimation = eval('(' + dataObj.animation + ')');\n                currentAnimation(myCanvas, myContext, event, dataObj.position, _emoImg);\n                currentAnimation = temp;\n              }\n            });\n\n            //looks for click event on the send button//\n            document.getElementById('send').addEventListener('click', function () {\n\n              //creates a message object with a stringified object containing the local port and the message\n              var yourMessageObj = JSON.stringify({\n                message: \"pal:\" + \" \" + document.getElementById('yourMessage').value\n              });\n              //creates a variable with the same information to display on your side\n              //peer.localPort is a temporary way to identify peers, should be changed\n              var yourMessage = \"you:\" + \" \" + document.getElementById('yourMessage').value;\n              //post message in text context on your side\n              document.getElementById('messages').textContent += yourMessage + '\\n';\n              //send message object to the data channel\n              peer.send(yourMessageObj);\n            });\n            //end send click event//\n\n            //click event for the \"filter me\" button//\n            document.getElementById('myFilter').addEventListener('click', function () {\n              var filterDataObj = void 0;\n              //checks for filter and assigns key yes or no based on whether or not one needs to be applied\n              if (!myVideo.style.filter) {\n                //creates and stringify object to send to the data channel with instructions to apply filter\n                filterDataObj = JSON.stringify({\n                  myFilter: 'yes',\n                  filterType: current.innerHTML\n                });\n                //add filter on your side\n                setVendorCss(myVideo, current.innerHTML);\n              } else {\n                //create and stringify object to send to the data channel with instructions to remove filter\n                filterDataObj = JSON.stringify({\n                  myFilter: 'no'\n                });\n                myVideo.removeAttribute('style');\n              }\n              //send object to data channel\n              peer.send(filterDataObj);\n            });\n\n            //click event for the \"filter them\" button\n            document.getElementById('peerFilter').addEventListener('click', function () {\n\n              var filterDataObj = void 0;\n              //checks for filter and assigns key yes or no based on whether one needs to be applied\n              if (!peerVideo.style.filter) {\n                //creates and stringify object to send to the data channel with instructions to apply filter\n                filterDataObj = JSON.stringify({\n                  peerFilter: 'yes',\n                  filterType: current.innerHTML\n                });\n                //add filter on your side\n                setVendorCss(peerVideo, current.innerHTML);\n              } else {\n                //creates and stringify object to send to the data channel with instructions to remove filter\n                filterDataObj = JSON.stringify({\n                  peerFilter: 'no'\n                });\n                //remove filter on your side\n                peerVideo.removeAttribute('style');\n              }\n              //sends object to the data channel\n              peer.send(filterDataObj);\n            });\n            ///end filter them click event///\n\n            //tesing filters//\n            button.addEventListener('click', function () {\n              current.innerHTML = filters[i];\n              i++;\n              if (i >= filters.length) i = 0;\n            }, false);\n            //end of filter test//\n\n            myCanvas.addEventListener('click', function (event) {\n              //gets position based mouse click coordinates, restricted\n              //to canvas rectangle, see function logic in function store\n              var myPosition = getCursorPosition(myCanvas, event);\n\n              var emoImg = new Image();\n              emoImg.src = currentImg;\n\n              var myCanvasObj = JSON.stringify({\n                animation: currentAnimation.toString(),\n                emoji: 'yes',\n                currentImg: currentImg,\n                position: {\n                  x: myPosition.x,\n                  y: myPosition.y\n                }\n              });\n\n              //animation for local display and data transmission to peer\n              currentAnimation(myCanvas, myContext, event, myPosition, emoImg);\n              peer.send(myCanvasObj);\n            }, false);\n            //end of click listener logic//\n\n            // adding buttons to change active animations\n            staticButton.addEventListener('click', function (event) {\n              currentAnimation = staticPaste;\n            });\n\n            bounceButton.addEventListener('click', function (event) {\n              currentAnimation = bounce;\n            });\n\n            orbitButton.addEventListener('click', function (event) {\n              currentAnimation = orbit;\n            });\n\n            clearButton.addEventListener('click', function (event) {\n              cancelAnimationFrame(raf);\n              myContext.clearRect(0, 0, myCanvas.width, myCanvas.height);\n              peerContext.clearRect(0, 0, peerCanvas.width, peerCanvas.height);\n            });\n\n            //adding click handler for active emoji selection\n            var emojis = document.getElementsByClassName('emoji');\n\n            var _loop = function _loop(_i) {\n              emojis[_i].addEventListener('click', function (event) {\n                currentImg = emojis[_i].querySelectorAll('img')[0].getAttribute('src');\n              });\n            };\n\n            for (var _i = 0; _i < emojis.length; _i++) {\n              _loop(_i);\n            }\n\n            //peer stream event//\n            peer.on('stream', function (stream) {\n\n              // peerVideo = document.getElementById('peerVideo')\n              // peerVideo.src = vendorUrl.createObjectURL(stream);\n              // peerVideo.play();\n\n              //uses the stream from the remote webcam and draws it on canvas//\n              peerVirtualVid = document.createElement('video');\n              peerVirtualVid.src = vendorUrl.createObjectURL(stream);\n              peerVirtualVid.play();\n\n              peerVideo = document.getElementById('peerVideo');\n              peerVidCtx = peerVideo.getContext('2d');\n\n              peerVirtualVid.addEventListener('play', function () {\n                peerVideo.width = 500; //640;\n                peerVideo.height = 385; //460;\n                drawVideo(this, peerVidCtx, peerVideo.width, peerVideo.height);\n              }, false);\n              //end remote draw//\n\n              peerCanvas = document.getElementById('peerCanvas');\n              peerContext = peerCanvas.getContext('2d');\n\n              //width and height should eventually be translated to exact coordination\n              //with incoming video stream\n              peerCanvas.width = 500; //640;\n              peerCanvas.height = 385; //460;\n\n              //draws blank canvas on top of video, visibility may be unnecessary\n              peerContext.rect(0, 0, peerCanvas.width, peerCanvas.height);\n              peerContext.stroke();\n\n              //remote display animation this to data channel logic easy peasy\n              peerCanvas.addEventListener('click', function (event) {\n\n                //gets position based mouse click coordinates, restricted\n                //to canvas rectangle, see function logic in function store\n                var peerPosition = getCursorPosition(peerCanvas, event);\n\n                var emoImg = new Image();\n                emoImg.src = currentImg;\n\n                currentAnimation(peerCanvas, peerContext, event, peerPosition, emoImg);\n\n                var peerCanvasObj = JSON.stringify({\n                  animation: currentAnimation.toString(),\n                  peerEmoji: 'yes',\n                  currentImg: currentImg,\n                  position: {\n                    x: peerPosition.x,\n                    y: peerPosition.y\n                  }\n                });\n                peer.send(peerCanvasObj);\n              }, false);\n              //end of click listener logic//\n            });\n            ///end peer stream event///\n          }); //end of socket.on('initiated')\n\n        }, function (err) {\n          console.error(err);\n        });\n      } //end of boolean in socket 'process' event\n    }); //end of socket 'process' event\n  }); //end of 'join' event\n\n\n  //function store//\n\n  function bounce(cv, ctx, evt, pos, emoImg) {\n    var onload = emoImg.onload;\n\n    //this object keeps track of the movement, loads the images, and determines\n    //the velocity\n    var emoticon = {\n      x: pos.x,\n      y: pos.y,\n      vx: 5,\n      vy: 2,\n      onload: function onload() {\n        ctx.drawImage(emoImg, this.x - emoImg.width / 2, this.y - emoImg.height / 2);\n      }\n    };\n\n    //initial image load on canvas\n    emoticon.onload();\n    var callBack = function callBack() {\n      velocity(emoticon, ctx, cv, callBack, emoImg);\n    };\n\n    //start drawing movement\n    raf = window.requestAnimationFrame(callBack);\n  }\n\n  function staticPaste(cv, ctx, evt, pos, emoImg) {\n    var onload = emoImg.onload;\n\n    //this object keeps track of the movement, loads the images, and determines\n    //the velocity\n    var emoticon = {\n      x: pos.x,\n      y: pos.y,\n      vx: 5,\n      vy: 2,\n      onload: function onload() {\n        ctx.drawImage(emoImg, this.x - emoImg.width / 2, this.y - emoImg.height / 2);\n      }\n    };\n    //initial image load on canvas\n    emoticon.onload();\n  }\n\n  //orbit func//\n  function orbit(cv, ctx, evt, pos, emoImg) {\n    var onload = emoImg.onload;\n\n    //this object keeps track of the movement, loads the images, and determines\n    //the angular veloctiy. We're keeping track of frequency of refreshes to\n    //imcrement the degrees\n    var movement = .0349066;\n    var emoticon = {\n      x: pos.x,\n      y: pos.y,\n      r: 5,\n      rotateCount: 1,\n      wx: movement,\n      wy: movement,\n      onload: function onload() {\n        ctx.drawImage(emoImg, this.x - emoImg.width / 2, this.y - emoImg.height / 2);\n      }\n    };\n\n    //initial image load on canvas\n    emoticon.onload();\n\n    var callBack = function callBack() {\n      angularVelocity(emoticon, ctx, cv, callBack, emoImg);\n    };\n\n    //start drawing movement\n    raf = window.requestAnimationFrame(callBack);\n  }\n  //end orbit//\n\n  //paste object to canvas\n  function paste(video, context, width, height, x, y, source) {\n    context.drawImage(video, 0, 0, width, height);\n    baseImg = new Image();\n    baseImg.src = source; // needs to be path ie --> 'assets/weird.png';\n    baseImg.onload = function () {\n      context.drawImage(baseImg, x - baseImg.width / 2, y - baseImg.height / 2);\n      //setTimeout for pasted images//\n      // var time = window.setTimeout(function() {\n      // context.clearRect(x - baseImg.width / 2, y - baseImg.height / 2, baseImg.width, baseImg.height);\n      // }, 5000);\n    };\n  }\n  //end paste//\n\n  //gets cursor position upon mouse click that places\n  //an object or starts object movement\n  function getCursorPosition(canvas, event) {\n    var rect = canvas.getBoundingClientRect();\n    var x = event.clientX - rect.left;\n    var y = event.clientY - rect.top;\n    var pos = {\n      x: x,\n      y: y\n    };\n    return pos;\n  }\n  //end getCursorPosition//\n\n  //streamline vendor prefixing for css filtering\n  function setVendorCss(element, style) {\n    element.style.webkitFilter = style;\n    element.style.mozFilter = style;\n    element.style.filter = style;\n  }\n  //end setVendorCss //\n\n  //draws video on canvas\n  function drawVideo(v, c, w, h) {\n    if (v.paused || v.ended) return false;\n    c.drawImage(v, 0, 0, w, h);\n    setTimeout(drawVideo, 20, v, c, w, h);\n  }\n  //end drawVideo//\n\n  //canvas draw function for velocity motion\n  function velocity(obj, ctx, cv, cb, emoImg) {\n    ctx.clearRect(obj.x - emoImg.width / 2 - 5, obj.y - emoImg.height / 2 - 5, emoImg.width + 8, emoImg.height + 8);\n    obj.onload();\n    obj.x += obj.vx;\n    obj.y += obj.vy;\n    if (obj.y + obj.vy > cv.height || obj.y + obj.vy < 0) {\n      obj.vy = -obj.vy;\n    }\n    if (obj.x + obj.vx > cv.width || obj.x + obj.vx < 0) {\n      obj.vx = -obj.vx;\n    }\n    raf = window.requestAnimationFrame(cb);\n  }\n  //end velocity//\n\n  //angularVelocity func//\n  function angularVelocity(obj, ctx, cv, cb, emoImg) {\n    ctx.clearRect(obj.x - emoImg.width / 2 - 5, obj.y - emoImg.height / 2 - 5, emoImg.width + 10, emoImg.height + 10);\n    obj.onload();\n\n    obj.x += Math.sin(obj.wx * obj.rotateCount) * obj.r;\n    obj.y += Math.cos(obj.wy * obj.rotateCount) * obj.r;\n    obj.rotateCount++;\n\n    raf = window.requestAnimationFrame(cb);\n  }\n  //end angularVelocity//\n\n  //doesnt work yet, but would provide a way to erase drawn\n  //objects in circular fashion rather than rectangular\n  function cutCircle(context, x, y, radius) {\n    context.globalCompositeOperation = 'destination-out';\n    context.arc(x, y, radius, 0, Math.PI * 2, true);\n    context.fill();\n  }\n  //end cutCircle//\n\n  ///end of function store///\n});//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }
/******/ ]);